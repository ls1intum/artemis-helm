# Default values for artemis.

# Sepcify the Artemis verion 
# This value is used as docker image tag, so also "pr-1234" is a valid value here. 
# See https://github.com/ls1intum/Artemis/pkgs/container/artemis/versions
artemisVersion: "5.5.7"


# Application specific configuration 
application: 
  userManagement: 

    # Initial Artemis admin account - Required!
    internalAdmin: 
      username: 
      password:
   
    # Set true if external user management shoule be enabled
    useExternal: false

    # Configure the user management provider. Valid values are "" and "jira"
    provider: ""

    jira: 
      url: ""
      username: ""
      password: ""

      # The specified Jira group will have administrator access to Artemis
      adminGroupName: ""

    # the whole section is optional: whether user details (such as the registration number) can be obtained from a LDAP service
    ldap:
      enabled: false
      url: ""
      userDn: ""
      base: ""
      password: ""
      allowedUsernamePattern: ''
      # allowedUsernamePattern: '^([a-z]{2}\d{2}[a-z]{3})$'zs # example for a TUM identifier, e.g. ab12cde

  versioncontrol: 

    # Configure version control provider. Valid values are "" and "bitbucket"
    provider: ""

    defaultBranch: main 

    # Bitbucket is only supported in conjungtion with jira usermanagement 
    bitbucket: 
      url: 

      # SSH clone url - Make sure that this url ends with a /
      sshCloneUrl: 

      # Artemis user access token in Bitbucket
      token: 

  continuousIntegration: 

    # Configure CI provider. Valid values are "" and "bamboo"
    provider: ""

    # Bamboo is only supported in conjungtion with jira usermanagement 
    bamboo: 
      url:

      # Access token for the Artemis bamboo user 
      accessToken: 

      # Token used by the Artemis Bamboo plugin to send results to Artemis 
      notificationToken: 
      applicationLinkName: 
      
  # Configuration of the jHipster Registry
  registry: 
    jwt: 
    password: "SuperSecure"

  # ActiveMQ message broker configuration 
  broker: 
    username: "brokeruser"
    password: "brokerpassword"


# Configuration for the artemis application server pods 
artemis:
  # Currently we only support 1 replica of artemis. This will change in the future
  replicaCount: 0

  image:
    repository: "ghcr.io/ls1intum/"
    name: "artemis"
    pullPolicy: Always

  podAnnotations:
    prometheus.io/path: /management/prometheus
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"

  podSecurityContext: 
    allowPrivilegeEscalation: false

  securityContext: {}

  service:
    type: ClusterIP
    port: 8080

  ingress:
    enabled: true
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: example.com 
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - example.com

  volumes: 
    name: artemis-pvc
    accessModes: 
      - ReadWriteMany
    size: 3Gi 
    storageClassName: ""
    mountPath: "/artemisdata"


  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

  autoscaler:
    # Whether the autoscaling should be used for the Artemis deployment
    enabled: false
    # IP address range that should be allowed to query metrics (must include the IP of the deployed prometheus server)
    monitoringIp: "0.0.0.0/0"
    # Which metrics should be used for the scaling
    metrics:
      # Average number of users that should be targeted - the autoscaler will scale according to this metrics
      # Note that this metrics requires the deployment of a prometheus server and a prometheus adapter
      usersPerInstance: 100
    # Minimum number of replicas
    minReplicas: 1
    # Maximum number of replicas
    maxReplicas: 5

database: 
  volumes:
    size: 3Gi
    storageClassName: ""

registry:
  replicaCount: 1

  image:
    # Leave empty to use the official image
    repository: ""
    name: "jhipster/jhipster-registry"
    version: "v7.3.0"
    pullPolicy: Always

      #podAnnotations: {}

  service: 
    name: jhipster-registry-service
    type: ClusterIP
    port: 8761

broker: 
  image: 
    repository: "ghcr.io/ls1intum/"
    name: "activemq-broker-docker-adoptopenjdk-11"
    version: "2.21.0"
    pullPolicy: Always

  service:
    name: "activemq-broker"
    type: ClusterIP
    port: 61616


# Prometheus server & adapter for horizontal autoscaling
prometheus:
  alertmanager:
    enabled: false
  kubeStateMetrics:
    enabled: false
  nodeExporter:
    enabled: false
  pushgateway:
    enabled: false
  server:
    global:
      scrape_interval: "15s"

prometheus-adapter:
  prometheus:
      port: 80
      url: http://{{ tpl (.Release.Name) . }}-prometheus-server.{{ tpl (.Release.Namespace) . }}.svc
# End Prometheus server & adapter for horizontal autoscaling